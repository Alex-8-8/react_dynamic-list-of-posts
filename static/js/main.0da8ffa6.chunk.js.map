{"version":3,"sources":["api.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/Comments/Comments.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["API_URL","getData","url","a","fetch","response","json","getUsers","getPosts","getComments","loadPreparedPosts","users","posts","comments","preparedPost","map","post","user","find","id","userId","filter","comment","postId","User","person","name","email","address","className","street","suite","city","zipcode","Comment","body","role","aria-label","Comments","key","Post","postInfo","title","PostList","onInputChange","inputValue","htmlFor","type","placeholder","onChange","value","App","useState","isLoaded","setLoad","isLoading","setLoading","setPosts","query","setQuery","filteredPosts","toLowerCase","includes","event","target","onClick","then","newPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0da8ffa6.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nconst getUsers = async (): Promise<Users> => {\n  return getData<Users>(`${API_URL}users`);\n};\n\nconst getPosts = async (): Promise<Posts> => {\n  return getData<Posts>(`${API_URL}posts`);\n};\n\nconst getComments = async (): Promise<Comments> => {\n  return getData<Comments>(`${API_URL}comments`);\n};\n\nexport const loadPreparedPosts = async (): Promise<PreparedPosts> => {\n  const users: Users = await getUsers();\n  const posts: Posts = await getPosts();\n  const comments: Comments = await getComments();\n\n  const preparedPost = posts.map(post => ({\n    ...post,\n    user: users.find(user => user.id === post.userId) as User,\n    comments: comments.filter(comment => comment.postId === post.id),\n  }));\n\n  return preparedPost;\n};\n","import React from 'react';\nimport './User.css';\n\ninterface Props {\n  person: User;\n}\n\nexport const User: React.FC<Props> = ({ person: { name, email, address } }) => (\n  <div className=\"user\">\n    <h3>\n      <span>author: </span>\n      { name }\n    </h3>\n    <p>\n      <span>email: </span>\n      { email }\n    </p>\n    <div>\n      <p>adress:</p>\n      <p>{address.street}</p>\n      <p>{address.suite}</p>\n      <p>{address.city}</p>\n      <p>{address.zipcode}</p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './Comment.css';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: React.FC<Props> = ({ comment: { name, email, body } }) => (\n  <div className=\"comment\">\n    <span role=\"img\" aria-label=\"pspeech baloon\">ðŸ’¬</span>\n    <div className=\"comment__wrapper\">\n      <div className=\"comment__user-email\">\n        <h4 className=\"comment__title\">{ name }</h4>\n        <p>{ email }</p>\n      </div>\n      <p className=\"comment__body\">{ body }</p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './Comments.css';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  comments: Comments;\n}\n\nexport const Comments: React.FC<Props> = ({ comments }) => (\n  <div className=\"comments\">\n    <h2 className=\"comments__title\">Comments:</h2>\n    {comments.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './Post.css';\nimport { User } from '../User/User';\nimport { Comments } from '../Comments/Comments';\n\ninterface Props {\n  postInfo: PreparedPost;\n}\n\nexport const Post: React.FC<Props> = ({\n  postInfo: {\n    title,\n    body,\n    user,\n    comments,\n  },\n}) => (\n  <div className=\"post\">\n    <h3 className=\"post__title\">{title}</h3>\n    <p className=\"post__description\">{body}</p>\n    <User person={user} />\n    <Comments comments={comments} />\n  </div>\n);\n","import React from 'react';\nimport './PostList.css';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  posts: PreparedPosts;\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  inputValue: string;\n}\n\nexport const PostList: React.FC<Props> = ({ posts, onInputChange, inputValue }) => (\n  <div className=\"posts\">\n    <div className=\"posts__search-wrapper\">\n      <label htmlFor=\"search-field\">\n        <span className=\"posts__search\">Search: </span>\n        <input\n          className=\"posts__input\"\n          type=\"text\"\n          placeholder=\"Search title or body\"\n          id=\"search-field\"\n          onChange={onInputChange}\n          value={inputValue}\n        />\n      </label>\n    </div>\n    {posts.map(post => (\n      <Post key={post.id} postInfo={post} />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './App.css';\nimport { loadPreparedPosts } from './api';\nimport { PostList } from './components/PostList/PostList';\n\nconst App: React.FC = () => {\n  const [isLoaded, setLoad] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [posts, setPosts] = useState<PreparedPosts>([]);\n  const [query, setQuery] = useState<string>('');\n\n  const handleLoad = () => {\n    setLoading(true);\n    loadPreparedPosts().then(newPosts => {\n      setPosts(newPosts);\n      setLoad(true);\n      setLoading(false);\n    });\n  };\n\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  const filteredPosts = posts.filter(post => (\n    post.title.toLowerCase().includes(query.toLowerCase())\n    || post.body.toLowerCase().includes(query.toLowerCase())\n  ));\n\n  return (\n    <div className=\"wrapper\">\n      {isLoaded\n        ? (\n          <PostList\n            posts={filteredPosts}\n            onInputChange={handleChange}\n            inputValue={query}\n          />\n        )\n        : (\n          <div className=\"front-page\">\n            <div className=\"front-page__wrapper\">\n              <h1 className=\"front-page__title\">Dynamic list of posts</h1>\n              <button\n                className=\"front-page__btn\"\n                type=\"button\"\n                onClick={handleLoad}\n              >\n                {!isLoading ? <span>Load</span> : <span>Loading...</span>}\n              </button>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}